// Arrays

// Adding Elements

// const numbers = [3, 4];


// // End
// numbers.push(5, 6)

// console.log(numbers);

// // Beginning
// numbers.unshift(1, 2)

// console.log(numbers);

// // Middle

// numbers.splice(2, 0, 'a', 'b')

// console.log(numbers);



// Finding Elements

// Primitive Arrays

// const numbers = [1, 2, 3, 4];


// console.log(numbers.indexOf(2)); // Type matter, if i pass '1', it returns -1 so that means it's false

// let's think we have 2 same variable, inder order to find lastest one, we use lastIndexOf() -> Method. Here is example


// const numbers = [1, 2, 3, 4, 5, 6, 7, 2, 3, 1]

// console.log(numbers.lastIndexOf(1)); // it's 9

// const numbers = [1, 2, 3, 4, 5, 6, 7]

// console.log(numbers.includes(5)); // true, number 5 includes


// When we use indexOf() -> here we can pass 2 values, that means indexOf(1 - the thing that should find, second value is -> the start index)

// console.log(numbers.indexOf(2, 4)); // it start finding from the 4 index



// Finding elements (reference types)

// let courses = [{
//         id: 1,
//         name: 'a'
//     },
//     {
//         id: 2,
//         name: 'b'
//     }
// ];

// console.log(
//     courses.includes({
//         id: 1,
//         name: 'a'
//     })
// );

// const course = courses.find(function (course) {
//     return course.name === 'a'
// })

// const courseIndex = courses.findIndex(function (course) {
//     return course.name === 'a'
// })

// console.log(course);

// console.log(courseIndex);



// Arrow Function

// const course = courses.findIndex(course => course.name === 'a')

// console.log(course);



// Removing Elements

// const numbers = [1, 2, 3, 4]

// console.log(numbers);

// // End
// const last = numbers.pop()

// console.log(last);

// // Beginning

// const first = numbers.shift()

// console.log(first);

// Middle

// const middle = numbers.splice(1, 1)

// console.log(numbers); // [1, 3, 4]



// Emptying an Arrays


// Solution 1
// const numbers = [1, 2, 3, 4]
// let another = numbers;
// numbers = []


// Solution 2
// numbers.length = 0 => the best way


// Solution 3
// numbers.splice(0, numbers.length)


// Solution 4
// while (numbers.length > 0) {
//     numbers.pop()
// }
// console.log(another);
// console.log(numbers);


// Combining Arrays

// const first = [{
//     id: 1
// }]
// const second = [4, 5, 6]

// let combined = first.concat(second)
// // if we go to the first array, we get reference type, if we pass the object
// let sliced = combined.slice(2, 4)
// let sliced_1 = combined.slice(2) // slicing it from 2 index
// let sliced_2 = combined.slice() // copying fully
// // If we use primitive types, it copies from value, if reference type, it copies by its reference

// // console.log(first);
// // console.log(second);

// console.log(combined);
// console.log(sliced);


// the Spread Operator

// const first = [1, 2, 3]

// const second = [4, 5, 6]

// const combined = [...first, 'a', ...second, 'b']

// console.log(combined);


// Iterating an Array


// In order to iterate array, we use for...of

// const numbers = [1, 2, 3]

// for (let number of numbers) {
//     console.log(number);
// }

// numbers.forEach((number, index) => console.log(index, number))




// Joining Arrays

// const numbers = [1, 2, 3]

// const joined = numbers.join(', ')

// console.log(joined);



// const message = 'This is my first message';

// const parts = message.split(' ')

// console.log(parts);

// const combined = parts.join('-')

// console.log(combined);



// Sorting Arrays

// const numbers = [2, 3, 1]

// console.log(numbers);
// numbers.sort()

// console.log(numbers);


// numbers.reverse()

// console.log(numbers);


// const cources = [{
//         id: 1,
//         name: 'Node.js'
//     },
//     {
//         id: 2,
//         name: 'JavaScript'
//     }
// ]

// const numbers = [50, 30, 20, 11, 15]
// const sorted = numbers.sort((a, b) => a - b);

// cources.sort(function (a, b) {

// a < b => -1
// a > b => 1
// a === b => 0

//     let nameA = a.name.toLowerCase()
//     let nameB = b.name.toLowerCase()

//     if (nameA < nameB) return -1;
// })

// console.log(cources);

// console.log(sorted);


// –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç sort()?
// –ú–µ—Ç–æ–¥ sort() –≤ JavaScript —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞ —Ä–∞–∑ ‚Äî a –∏ b.

// –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å:

// –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (< 0) ‚Äî –µ—Å–ª–∏ a –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–¥ b

// –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (> 0) ‚Äî –µ—Å–ª–∏ a –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ b

// 0 ‚Äî –µ—Å–ª–∏ –ø–æ—Ä—è–¥–æ–∫ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è





// Testing the elements of Array


// const numbers = [1, 0, 3, 1, 2, 3, 4]

// const allPositive = numbers.every(function (value) {
//     return value >= 0
// })

// every() - this call back function, it checks every element matches the criteria
// some() - this is also call back function, but it checks if it there, like it works same as LOGICAL OR - || - like this

// console.log(allPositive);


// Filtering an Array


// const numbers = [1, 2, -1, 3, 4, 5]

// let filtered = numbers.filter(n => n >= 0)


// console.log(filtered); // [1, 2, 3, 4, 5] - Here, the filter() - method -> deleted the -1


// Mapping an Array


// let numbers = [1, 2, 3, 4, 5]

// const doubled = numbers.map(num => num * 2)

// console.log(doubled);





// –ó–¥–µ—Å—å:

//     numbers‚Äî –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤.

//     .map()‚Äî –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç.

//      num * 2‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –¥–µ–ª–∞–µ–º —Å –∫–∞–∂–¥—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º.

//      doubled‚Äî –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.


// let users = [{
//     name: 'Hasanboy',
//     age: 20
// }, {
//     name: 'John',
//     age: 35
// }]


// const user_Names = users.map(user => user.name)

// console.log(user_Names);


// let products = [{
//     id: 1,
//     name: 'Laptop',
//     price: 500
// }, {
//     id: 2,
//     name: 'Phone',
//     price: 250
// }, {
//     id: 3,
//     name: 'PC',
//     price: 750
// }]


// const id_And_Price = products.map(product => ({
//     id: product.id,
//     price: product.price
// }))

// console.log(id_And_Price);


// const id_And_Price = products.map(products => ([products.name, products.price]))

// console.log(id_And_Price);


// const product_info = products.map(product => `Id: ${product.id}, –¶–µ–Ω–∞: ${product.price}`)

// console.log(product_info);


// const idAndPrice = products.map(({ id, price }) => ({ id, price }));

// console.log(idAndPrice);
// [{ id: 1, price: 500 }, { id: 2, price: 1200 }]


// const items = ['Home', 'About', 'Contact']

// const htmlList = items.map(item => `<li>${item}</li>`).join('');

// console.log(htmlList);


// üîπ –ü—Ä–µ–¥—Å—Ç–∞–≤—å —Å–∏—Ç—É–∞—Ü–∏—é
// –¢—ã –¥–µ–ª–∞–µ—à—å —Å–∞–π—Ç. –£ —Ç–µ–±—è –µ—Å—Ç—å –º–µ–Ω—é (–∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –ø–æ—Å—Ç–æ–≤, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π), –∏ —Ç—ã —Ö–æ—á–µ—à—å –µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:

// const items = ['–ì–ª–∞–≤–Ω–∞—è', '–û –Ω–∞—Å', '–ö–æ–Ω—Ç–∞–∫—Ç—ã'];
// üî∏ –ë–µ–∑ .map() —Ç–µ–±–µ –ø—Ä–∏—à–ª–æ—Å—å –±—ã –ø–∏—Å–∞—Ç—å –≤–æ—Ç —Ç–∞–∫:

// <li>–ì–ª–∞–≤–Ω–∞—è</li>
// <li>–û –Ω–∞—Å</li>
// <li>–ö–æ–Ω—Ç–∞–∫—Ç—ã</li>

// –ù–æ —á—Ç–æ, –µ—Å–ª–∏ —É —Ç–µ–±—è 50 –ø—É–Ω–∫—Ç–æ–≤? –ò–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞? –†—É—á–∫–∞–º–∏ –ø–∏—Å–∞—Ç—å ‚Äî üíÄ.

// üî∏ –° .map() ‚Äî —Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—à—å:

// const htmlList = items.map(item => `<li>${item}</li>`).join('');
// üìå –≠—Ç–æ —Å–æ–∑–¥–∞—ë—Ç HTML –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

// üîπ –ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ —Ç–µ–±–µ?
// –°–∏—Ç—É–∞—Ü–∏—è	–ß—Ç–æ –¥–∞—ë—Ç .map()
// –£ —Ç–µ–±—è –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–≤–∞—Ä—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ—Å—Ç—ã –∏ —Ç.–¥.)	–ë—ã—Å—Ç—Ä–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—à—å –∏—Ö –≤ HTML
// –î–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞ (API)	–ü–æ–∫–∞–∑—ã–≤–∞–µ—à—å –∏—Ö –Ω–∞ —Å–∞–π—Ç–µ
// –¢—ã —Ö–æ—á–µ—à—å –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏	–ë–µ–∑ —Ä—É—á–Ω–æ–≥–æ –∫–æ–¥–∞ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
// –¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å React	.map() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–∞–∂–¥–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ

// üî∏ –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –≤ –∂–∏–∑–Ω–∏:
// –¢—ã –¥–µ–ª–∞–µ—à—å —Å–∞–π—Ç –¥–ª—è –∫—É—Ä—Å–æ–≤. –ö—É—Ä—Å—ã —É —Ç–µ–±—è –≤ –º–∞—Å—Å–∏–≤–µ:


// const courses = ['HTML', 'CSS', 'JavaScript'];
// –° –ø–æ–º–æ—â—å—é .map() —Ç—ã –∑–∞ 1 —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –ø–æ–ª—É—á–∞–µ—à—å —Å–ø–∏—Å–æ–∫ –Ω–∞ —ç–∫—Ä–∞–Ω–µ:


// <ul>
//   ${courses.map(c => `<li>${c}</li>`).join('')}
// </ul>
// üîö –í—ã–≤–æ–¥:
// .map() ‚Äî —ç—Ç–æ –∫–∞–∫ ¬´–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å¬ª –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞:
// –±—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞—ë—à—å –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã–µ —á–∞—Å—Ç–∏, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—è –∫–æ–¥ —Ä—É–∫–∞–º–∏.

// –•–æ—á–µ—Ç–µ ‚Äî –ø–æ–∫–∞–∂—É —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –ø—Ä—è–º–æ –≤ HTML-—Ñ–∞–π–ª–µ –∏–ª–∏ –≤ React.



// const numbers = [1, 2, 3, 4, -2, -5]

// const item = numbers.filter(n => n >= 0).map(n => ({
//     value: n
// }))

// console.log(item);


// Reducing an Array


// const numbers = [1, 2, 3]
// let sum = 0;

// for (let n of numbers) sum += n;

// console.log(sum);

// a = 0, c = 1 => a = 1
// a = 1, c = 2 => a = 3
// a = 3, c = 3 => a = 6

// let result = numbers.reduce((accumulator, currentValue) => {
//     return accumulator + currentValue
// }, 0)

// console.log(result);